# Ce flux de travail va construire un projet Java avec Maven, et mettre en cache/restaurer toutes les dépendances pour améliorer le temps d’exécution du flux de travail
# Pour plus d’informations, consultez : https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

name: Java CI with Maven

on:                                    # Le workflow se déclenche...
  push:                                  # lors d’un push sur la branche main           
    branches: [ "main" ]        
  pull_request:                          # lors d’un pull request vers main (fusion acceptée ou non par un tech lead)
    branches: [ "main" ]
  workflow_dispatch:                     # AJOUT : manuellement via l’interface GitHub

jobs:                                  # Un pipeline est un esnemble de jobs
  test:                                # AJOUT : Ce job s'exécute sur une machine virtuelle Ubuntu qui sera conteneurisé.
    runs-on: ubuntu-latest             # Ce job s'exécute sur une machine virtuelle Ubuntu.
    steps:                             # Les étapes sont les suivantes :
     - uses: actions/checkout@v4        # Récupération du code source du repository et placement dans le conteneur
     - name: Set up JDK 21              # Configuration du JDK 21 par installation de Java21 et activation du cache Maven
       uses: actions/setup-java@v4
       with:
         java-version: '21'
         distribution: 'temurin'
         cache: maven
     - name: Build with Maven
       run: mvn test jacoco:check --file pom.xml
     - name: Generate JaCoCo Badge                         #AJOUT : Badge Jacoco
       uses: cicirello/jacoco-badge-generator@v2
       with:
         generate-branches-badge: true
     - name: Commit the Jacoco badge (if it changed)         # les badges générés doivent être commités afin d’être disponibles sur le fichier readme.md
       run: |
        if [[ `git status --porcelain *.svg` ]]; then
          git config --global user.name 'romainsessa'
          git config --global user.email 'romainsessa@users.noreply.github.com'
          git add *.svg
          git commit -m "Autogenerated JaCoCo coverage badge"
          git push
        fi
  build:                            # Job de build
    runs-on: ubuntu-latest             # Ce job s'exécute sur une machine virtuelle Ubuntu qui sera conteneurisé.
    needs: test                        # AJOUT : D'abord le test et après le build : Ce job ne s'exécute que si le job test réussit.
    steps:                             # Les étapes sont les suivantes :
    - uses: actions/checkout@v4        # Récupération du code source du repository
    - name: Set up JDK 21              # Configuration du JDK 21 par installation de Java21 et activation du cache Maven
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package -DskipTests --file pom.xml      #AJOUT de -DskipTests : Build avec Maven pour générer le JAR sans les tests
  
  
  # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
  #- name: Update dependency graph                                                                                      #Suppr
  #  uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6                #Suppr
  
    - name: Upload a Build Artifact     # Compilation puis génération du .jar et uploadé comme artefact pour téléchargement
      uses: actions/upload-artifact@v4.6.2
      with:
        name: build-artifact             # Nom visible dans GitHub
        path: target/*.jar               # Où se trouve le JAR

  SonarQube:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin' # Alternative distribution options are available.
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=schranz67_api_rest
        

